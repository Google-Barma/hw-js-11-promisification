{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js"],"names":["btnRef","document","querySelector","addEventListener","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","checked","then","dir","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAASC,SAASC,cAAc,YACtCF,EAAOG,iBAAiB,UAIxB,WACE,IAAMC,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEnBV,EAAOa,UAETT,EAAM,KAAMU,KAAKL,GACjBL,EAAM,KAAMU,KAAKL,GACjBL,EAAM,MAAMU,KAAKL,OAjBrBE,QAAQI,IAAIf,G,kCCHNA,EAASC,SAASC,cAAc,YACtCF,EAAOG,iBAAiB,UAExB,WACE,IAAMa,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG/D,OAAOlB,QAAQC,QAAQe,IAGnBb,EAAS,SAAAa,GAAY,OAAIX,QAAQc,MAAMH,IAEzCtB,EAAOa,UACTM,EAAgBH,EAAO,SAASF,KAAKL,GACrCU,EAAgBH,EAAO,OAAOF,KAAKL,OCvBvC,IAAMT,EAASC,SAASC,cAAc,YACtCF,EAAOG,iBAAiB,UAExB,WACE,IAIMuB,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCzB,GAL2BwB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAItB,SAAQ,SAACC,EAAS0B,GAC3BzB,YAAW,WACUsB,KAAKE,SAAW,GAGjCzB,EAAQoB,EAAYO,GAAI9B,GAExB6B,EAAON,EAAYO,MAEpB9B,OAID+B,EAAa,SAACD,EAAIxB,GACtBC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAGElC,EAAOa,UACTa,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,S","file":"main.e118bd1748fe5e67f46f.js","sourcesContent":["const btnRef = document.querySelector('.task-01');\nbtnRef.addEventListener('change', handleTask01Rub);\n\nconsole.dir(btnRef);\n\nfunction handleTask01Rub() {\n  const delay = ms => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(ms);\n      }, ms);\n    });\n  };\n\n  const logger = time => console.log(`Resolved after ${time}ms`);\n\n  if (btnRef.checked) {\n    // Вызовы функции для проверки\n    delay(2000).then(logger); // Resolved after 2000ms\n    delay(1000).then(logger); // Resolved after 1000ms\n    delay(1500).then(logger); // Resolved after 1500ms\n  }\n}\n","const btnRef = document.querySelector('.task-02');\nbtnRef.addEventListener('change', handleTask02);\n\nfunction handleTask02() {\n  const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n\n  const toggleUserState = (allUsers, userName) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    return Promise.resolve(updatedUsers);\n  };\n\n  const logger = updatedUsers => console.table(updatedUsers);\n\n  if (btnRef.checked) {\n    toggleUserState(users, 'Mango').then(logger);\n    toggleUserState(users, 'Lux').then(logger);\n  }\n}\n","const btnRef = document.querySelector('.task-03');\nbtnRef.addEventListener('change', handleTask03);\n\nfunction handleTask03() {\n  const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n\n        if (canProcess) {\n          resolve(transaction.id, delay);\n        } else {\n          reject(transaction.id);\n        }\n      }, delay);\n    });\n  };\n\n  const logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n\n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n\n  if (btnRef.checked) {\n    makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\n    makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\n    makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\n    makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n  }\n}\n"],"sourceRoot":""}